// <auto-generated/>
#pragma warning disable CS0618
using KiotaPosts.RestfulBookerClient.Booking.Item;
using KiotaPosts.RestfulBookerClient.Models;
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace KiotaPosts.RestfulBookerClient.Booking
{
    /// <summary>
    /// Builds and executes requests for operations under \booking
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class BookingRequestBuilder : BaseRequestBuilder
    {
        /// <summary>Gets an item from the KiotaPosts.RestfulBookerClient.booking.item collection</summary>
        /// <param name="position">booking id to find</param>
        /// <returns>A <see cref="global::KiotaPosts.RestfulBookerClient.Booking.Item.BookingItemRequestBuilder"/></returns>
        public global::KiotaPosts.RestfulBookerClient.Booking.Item.BookingItemRequestBuilder this[int position]
        {
            get
            {
                var urlTplParams = new Dictionary<string, object>(PathParameters);
                urlTplParams.Add("id", position);
                return new global::KiotaPosts.RestfulBookerClient.Booking.Item.BookingItemRequestBuilder(urlTplParams, RequestAdapter);
            }
        }
        /// <summary>Gets an item from the KiotaPosts.RestfulBookerClient.booking.item collection</summary>
        /// <param name="position">booking id to find</param>
        /// <returns>A <see cref="global::KiotaPosts.RestfulBookerClient.Booking.Item.BookingItemRequestBuilder"/></returns>
        [Obsolete("This indexer is deprecated and will be removed in the next major version. Use the one with the typed parameter instead.")]
        public global::KiotaPosts.RestfulBookerClient.Booking.Item.BookingItemRequestBuilder this[string position]
        {
            get
            {
                var urlTplParams = new Dictionary<string, object>(PathParameters);
                if (!string.IsNullOrWhiteSpace(position)) urlTplParams.Add("id", position);
                return new global::KiotaPosts.RestfulBookerClient.Booking.Item.BookingItemRequestBuilder(urlTplParams, RequestAdapter);
            }
        }
        /// <summary>
        /// Instantiates a new <see cref="global::KiotaPosts.RestfulBookerClient.Booking.BookingRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public BookingRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/booking{?checkin*,checkout*,firstname*,lastname*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::KiotaPosts.RestfulBookerClient.Booking.BookingRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public BookingRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/booking{?checkin*,checkout*,firstname*,lastname*}", rawUrl)
        {
        }
        /// <summary>
        /// Returns the ids of all the bookings that exist within the API. Can take optional query strings to search and return a subset of booking ids.
        /// </summary>
        /// <returns>A List&lt;global::KiotaPosts.RestfulBookerClient.Models.GetIdsResponse&gt;</returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<List<global::KiotaPosts.RestfulBookerClient.Models.GetIdsResponse>?> GetAsync(Action<RequestConfiguration<global::KiotaPosts.RestfulBookerClient.Booking.BookingRequestBuilder.BookingRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<List<global::KiotaPosts.RestfulBookerClient.Models.GetIdsResponse>> GetAsync(Action<RequestConfiguration<global::KiotaPosts.RestfulBookerClient.Booking.BookingRequestBuilder.BookingRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var collectionResult = await RequestAdapter.SendCollectionAsync<global::KiotaPosts.RestfulBookerClient.Models.GetIdsResponse>(requestInfo, global::KiotaPosts.RestfulBookerClient.Models.GetIdsResponse.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
            return collectionResult?.AsList();
        }
        /// <summary>
        /// Creates a new booking in the API
        /// </summary>
        /// <returns>A <see cref="global::KiotaPosts.RestfulBookerClient.Models.BookingResponse"/></returns>
        /// <param name="body">Represents a hotel booking in the system.</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::KiotaPosts.RestfulBookerClient.Models.BookingResponse?> PostAsync(global::KiotaPosts.RestfulBookerClient.Models.Booking body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::KiotaPosts.RestfulBookerClient.Models.BookingResponse> PostAsync(global::KiotaPosts.RestfulBookerClient.Models.Booking body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPostRequestInformation(body, requestConfiguration);
            return await RequestAdapter.SendAsync<global::KiotaPosts.RestfulBookerClient.Models.BookingResponse>(requestInfo, global::KiotaPosts.RestfulBookerClient.Models.BookingResponse.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Returns the ids of all the bookings that exist within the API. Can take optional query strings to search and return a subset of booking ids.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::KiotaPosts.RestfulBookerClient.Booking.BookingRequestBuilder.BookingRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::KiotaPosts.RestfulBookerClient.Booking.BookingRequestBuilder.BookingRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Creates a new booking in the API
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">Represents a hotel booking in the system.</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPostRequestInformation(global::KiotaPosts.RestfulBookerClient.Models.Booking body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPostRequestInformation(global::KiotaPosts.RestfulBookerClient.Models.Booking body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.POST, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            requestInfo.SetContentFromParsable(RequestAdapter, "application/json", body);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::KiotaPosts.RestfulBookerClient.Booking.BookingRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::KiotaPosts.RestfulBookerClient.Booking.BookingRequestBuilder WithUrl(string rawUrl)
        {
            return new global::KiotaPosts.RestfulBookerClient.Booking.BookingRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// Returns the ids of all the bookings that exist within the API. Can take optional query strings to search and return a subset of booking ids.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class BookingRequestBuilderGetQueryParameters 
        {
            /// <summary>Bookings that have a checkin date greater than or equal to this date. Format must be CCYY-MM-DD</summary>
            [QueryParameter("checkin")]
            public Date? Checkin { get; set; }
            /// <summary>Bookings that have a checkout date greater than or equal to this date. Format must be CCYY-MM-DD</summary>
            [QueryParameter("checkout")]
            public Date? Checkout { get; set; }
            /// <summary>Bookings with this firstname</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("firstname")]
            public string? Firstname { get; set; }
#nullable restore
#else
            [QueryParameter("firstname")]
            public string Firstname { get; set; }
#endif
            /// <summary>Bookings with this lastname</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("lastname")]
            public string? Lastname { get; set; }
#nullable restore
#else
            [QueryParameter("lastname")]
            public string Lastname { get; set; }
#endif
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class BookingRequestBuilderGetRequestConfiguration : RequestConfiguration<global::KiotaPosts.RestfulBookerClient.Booking.BookingRequestBuilder.BookingRequestBuilderGetQueryParameters>
        {
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
        public partial class BookingRequestBuilderPostRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618
